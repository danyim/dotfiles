[
  // Change ctrl+q to nothing
  { "keys": ["ctrl+q"]},
  { "keys": ["ctrl++shift+q"], "command": "exit" },

  // Change zooming to alt instead of control
  { "keys": ["alt++"], "command": "increase_font_size" },
  { "keys": ["alt+="], "command": "increase_font_size" },
  { "keys": ["alt+-"], "command": "decrease_font_size" },

  // Go to line
  { "keys": ["alt+shift+g"], "command": "goto_line", "args": {"line": "10"} },

  // Open settings like in OSX
  { "keys": ["ctrl+,"], "command": "edit_settings", "args":
    {
      "base_file": "${packages}/Default/Preferences.sublime-settings",
      "default": "// Settings in here override those in \"Default/Preferences.sublime-settings\",\n// and are overridden in turn by syntax-specific settings.\n{\n\t$0\n}\n"
    }
  },

  // // Bubbling/sinking lines -- doesn't work
  // { "keys": ["ctrl+alt+up"], "command": "swap_line_up" },
  // { "keys": ["ctrl+alt+down"], "command": "swap_line_down" },
  // { "keys": ["alt+delete"], "command": "run_macro_file", "args": {"file": "res://Packages/User/DeleteSubwordForward.sublime-macro"} },
  { "keys": ["control+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/DeleteSubwordBackward.sublime-macro"} },

  // Navigating search results
  { "keys": ["ctrl+g"], "command": "find_next" },
  { "keys": ["ctrl+shift+g"], "command": "find_prev" },

  // Multicursor
  { "keys": ["alt+up"], "command": "select_lines", "args": {"forward": false} },
  { "keys": ["alt+down"], "command": "select_lines", "args": {"forward": true} },

  { "keys": ["ctrl+shift+o"], "command": "prompt_open_folder" },

  // Reveals the file in the side bear
  { "keys": ["super+shift+r"], "command": "reveal_in_side_bar"},
  { "keys": ["ctrl+shift+r"], "command": "show_panel", "args": {"panel": "replace", "reverse": false} },

  // Chrome-like positional tab navigation
  { "keys": ["super+alt+left"], "command": "prev_view"},
  { "keys": ["super+alt+right"], "command": "next_view"},

  // For Emmet
  // http://www.nitinh.com/2015/02/setting-sublime-text-react-jsx-development/
  {
    "keys": ["tab"],
    "command": "chain",
    "args": {
      "commands": [
        ["expand_abbreviation_by_tab"],
        ["reg_replace", {"replacements": ["js_class"]}]
      ]
    },
    "context": [
      {"operand": "source.js", "operator": "equal", "match_all": true, "key": "selector"},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "(\\w+>\\w+|\\s(\\.?|a|div|span|p|button)\\.\\w+)", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true}
    ]
  },
  {
    "keys": ["tab"],
    "command": "expand_abbreviation_by_tab",

    // put comma-separated syntax selectors for which
    // you want to expandEmmet abbreviations into "operand" key
    // instead of SCOPE_SELECTOR.
    // Examples: source.js, text.html - source
    "context": [
      {
        "operand": "meta.group.braces.round.js, text.html",
        "operator": "equal",
        "match_all": true,
        "key": "selector"
      },

      // run only if there's no selected text
      {
        "match_all": true,
        "key": "selection_empty"
      },

      // don't work if there are active tabstops
      {
        "operator": "equal",
        "operand": false,
        "match_all": true,
        "key": "has_next_field"
      },

      // don't work if completion popup is visible and you
      // want to insert completion with Tab. If you want to
      // expand Emmet with Tab even if popup is visible --
      // remove this section
      {
        "operand": false,
        "operator": "equal",
        "match_all": true,
        "key": "auto_complete_visible"
      },
      {
        "match_all": true,
        "key": "is_abbreviation"
      }
    ]
  },
  { "keys": ["ctrl+super+c"], "command": "find_next_conflict" },

  // Allows for autocompletion of tags in JSX files
  // https://stackoverflow.com/questions/30027755/autocomplete-html-tags-in-jsx-sublime-text
  { "keys": ["/"], "command": "close_tag", "args": { "insert_slash": true }, "context":
    [
      { "key": "selector", "operator": "equal", "operand": "(text.html, text.xml, meta.jsx.js) - string - comment", "match_all": true },
      { "key": "preceding_text", "operator": "regex_match", "operand": ".*<$", "match_all": true },
      { "key": "setting.auto_close_tags" }
    ]
  },
  // Trigger string interpolation just by typing `$` when inside backticks
  { "keys": ["$"], "command": "insert_snippet", "args": {"contents": "\\${${1:$SELECTION}}$0"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      {
        "operand": "string.interpolated.js - string source",
        "operator": "equal",
        "match_all": true,
        "key": "selector"
      }
    ]
  },

  // // All other scopes, default comment toggle shortcut
  // { “keys”: [“ctrl+shift+7”], “command”: “toggle_comment”, “args”: { “block”: false } },

  // // Only in meta.jsx.js insert snippet
  // { “keys”: [“ctrl+shift+7”], “command”: “insert_snippet”, “args”: {“name”: “Packages/User/Snippets/jsx-comment.sublime-snippet”},

  // “context”:
  // [
  // { “key”: “selector”, “operator”: “equal”, “operand”: “meta.jsx.js”, “match_all”: true }
  // ]
  // },

  // Navigation history; jumping forwads and back
  { "keys": ["ctrl++"], "command": "jump_forward" },
  { "keys": ["ctrl+="], "command": "jump_forward" },
  { "keys": ["ctrl+-"], "command": "jump_back" }
]

